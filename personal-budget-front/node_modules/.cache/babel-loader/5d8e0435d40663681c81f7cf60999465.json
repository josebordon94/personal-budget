{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos varios\\\\pb\\\\personal-budget-front\\\\src\\\\components\\\\OperationHistory.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton'; // Icons\n\nimport EditIcon from '@material-ui/icons/EditOutlined';\nimport DoneIcon from '@material-ui/icons/DoneAllTwoTone';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport apirest from '../services/apirest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  },\n  table: {\n    minWidth: 200,\n    fontWeight: 'bold',\n    ' & tr td, tr th': {\n      fontSize: '1.1em'\n    }\n  },\n  selectTableCell: {\n    maxWidth: 40\n  },\n  input: {\n    width: 130,\n    height: 40\n  }\n}));\n\nconst createData = (id, concept, mount, type, date) => ({\n  id,\n  concept,\n  mount,\n  type,\n  date,\n  isEditMode: false\n});\n\nconst CustomTableCell = ({\n  row,\n  name,\n  onChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    isEditMode\n  } = row;\n  let cellText;\n\n  if (name === 'mount') {\n    if (row.type === 1) {\n      cellText = /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'green'\n        },\n        children: [\"+\", row.mount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }, this);\n    } else {\n      cellText = /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'red'\n        },\n        children: [\"-\", row.mount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 18\n      }, this);\n    }\n  } else {\n    cellText = row[name];\n  }\n\n  return /*#__PURE__*/_jsxDEV(TableCell, {\n    align: \"left\",\n    className: classes.tableCell,\n    children: isEditMode ? /*#__PURE__*/_jsxDEV(Input, {\n      value: row[name],\n      name: name,\n      onChange: e => onChange(e, row),\n      className: classes.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : cellText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomTableCell, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomTableCell;\n\nfunction OperationHistory(props) {\n  _s2();\n\n  const classes = useStyles();\n  const [rows, setRows] = useState([]);\n  const [previous, setPrevious] = React.useState(rows);\n  const jwt = localStorage.getItem('jwt');\n  const user_id = localStorage.getItem('user_id');\n  let config = {\n    headers: {\n      'x-access-token': jwt\n    }\n  };\n  useEffect(() => {\n    const fillTable = () => {\n      let newRows = [];\n      props.ops.forEach(element => {\n        const date = new Date(element.date).toISOString().split('T')[0].replaceAll('-', '/');\n        newRows.push(createData(element._id, element.concept, element.mount, element.type, date));\n      });\n      setRows(newRows);\n    };\n\n    const getData = function () {\n      fillTable();\n    };\n\n    getData();\n  }, [props]);\n\n  const onToggleEditMode = id => {\n    setRows(state => {\n      return rows.map(row => {\n        if (row.id === id) {\n          return { ...row,\n            isEditMode: !row.isEditMode\n          };\n        }\n\n        return row;\n      });\n    });\n  };\n\n  const onChange = (e, row) => {\n    if (!previous[row.id]) {\n      setPrevious(state => ({ ...state,\n        [row.id]: row\n      }));\n    }\n\n    const value = e.target.value;\n    const name = e.target.name;\n    const {\n      id\n    } = row;\n    const newRows = rows.map(row => {\n      if (row.id === id) {\n        return { ...row,\n          [name]: value\n        };\n      }\n\n      return row;\n    });\n    setRows(newRows);\n  };\n\n  const handleDelete = operation_id => {\n    axios.delete(apirest.apiUrl + '/operations/' + user_id + '/' + operation_id, config).then(res => {\n      if (res.data.error) {\n        console.log('Invalid data');\n        props.reFetch();\n        setRows('Loading');\n      } else {\n        props.reFetch();\n        setRows('Loading');\n      }\n    });\n  };\n\n  const handleSave = operation_id => {\n    let updateData;\n    rows.map(row => {\n      if (row.id === operation_id) {\n        updateData = row;\n      }\n\n      return 'x';\n    });\n    updateData.mount = parseFloat(updateData.mount).toFixed(2);\n    axios.put(apirest.apiUrl + '/operations/' + user_id + '/' + operation_id, updateData, config).then(res => {\n      if (res.data.error) {\n        console.log('Invalid data for update!'), props.reFetch();\n      } else {\n        props.reFetch();\n      }\n    });\n    onToggleEditMode(operation_id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"caption table\",\n      children: [/*#__PURE__*/_jsxDEV(\"caption\", {\n        children: rows.length > 0 ? 'Utilice el botón de lápiz para editar o eliminar un registro.' : 'No hay registros para mostrar.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Concepto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Monto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Fecha\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.selectTableCell,\n            children: row.isEditMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"done\" // onClick={() => onToggleEditMode(row.id)}\n                ,\n                onClick: () => handleSave(row.id),\n                children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"delete\",\n                onClick: () => handleDelete(row.id),\n                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"edit\",\n              onClick: () => onToggleEditMode(row.id),\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'concept',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'mount',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: row.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(OperationHistory, \"ehB6a/3AMFzlZx6WLLpqZD/NIpE=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = OperationHistory;\nexport default OperationHistory;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTableCell\");\n$RefreshReg$(_c2, \"OperationHistory\");","map":{"version":3,"sources":["C:/Proyectos varios/pb/personal-budget-front/src/components/OperationHistory.js"],"names":["React","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Input","Paper","IconButton","EditIcon","DoneIcon","DeleteIcon","useState","useEffect","axios","apirest","useStyles","theme","root","width","overflowX","table","minWidth","fontWeight","fontSize","selectTableCell","maxWidth","input","height","createData","id","concept","mount","type","date","isEditMode","CustomTableCell","row","name","onChange","classes","cellText","color","tableCell","e","OperationHistory","props","rows","setRows","previous","setPrevious","jwt","localStorage","getItem","user_id","config","headers","fillTable","newRows","ops","forEach","element","Date","toISOString","split","replaceAll","push","_id","getData","onToggleEditMode","state","map","value","target","handleDelete","operation_id","delete","apiUrl","then","res","data","error","console","log","reFetch","handleSave","updateData","parseFloat","toFixed","put","length"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Input from '@material-ui/core/Input'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n// Icons\r\nimport EditIcon from '@material-ui/icons/EditOutlined'\r\nimport DoneIcon from '@material-ui/icons/DoneAllTwoTone'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport apirest from '../services/apirest'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 200,\r\n    fontWeight: 'bold',\r\n    ' & tr td, tr th': {\r\n      fontSize: '1.1em',\r\n    },\r\n  },\r\n  selectTableCell: {\r\n    maxWidth: 40,\r\n  },\r\n\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n}))\r\n\r\nconst createData = (id, concept, mount, type, date) => ({\r\n  id,\r\n  concept,\r\n  mount,\r\n  type,\r\n  date,\r\n  isEditMode: false,\r\n})\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles()\r\n  const { isEditMode } = row\r\n  let cellText\r\n  if (name === 'mount') {\r\n    if (row.type === 1) {\r\n      cellText = <span style={{ color: 'green' }}>+{row.mount}</span>\r\n    } else {\r\n      cellText = <span style={{ color: 'red' }}>-{row.mount}</span>\r\n    }\r\n  } else {\r\n    cellText = row[name]\r\n  }\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        cellText\r\n      )}\r\n    </TableCell>\r\n  )\r\n}\r\nfunction OperationHistory(props) {\r\n  const classes = useStyles()\r\n  const [rows, setRows] = useState([])\r\n  const [previous, setPrevious] = React.useState(rows)\r\n  const jwt = localStorage.getItem('jwt')\r\n  const user_id = localStorage.getItem('user_id')\r\n  let config = {\r\n    headers: {\r\n      'x-access-token': jwt,\r\n    },\r\n  }\r\n  useEffect(() => {\r\n    const fillTable = () => {\r\n      let newRows = []\r\n      props.ops.forEach((element) => {\r\n        const date = new Date(element.date)\r\n          .toISOString()\r\n          .split('T')[0]\r\n          .replaceAll('-', '/')\r\n        newRows.push(\r\n          createData(\r\n            element._id,\r\n            element.concept,\r\n            element.mount,\r\n            element.type,\r\n            date,\r\n          ),\r\n        )\r\n      })\r\n      setRows(newRows)\r\n    }\r\n    const getData = function () {\r\n      fillTable()\r\n    }\r\n    getData()\r\n  }, [props])\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode }\r\n        }\r\n        return row\r\n      })\r\n    })\r\n  }\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }))\r\n    }\r\n    const value = e.target.value\r\n    const name = e.target.name\r\n    const { id } = row\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value }\r\n      }\r\n      return row\r\n    })\r\n    setRows(newRows)\r\n  }\r\n\r\n  const handleDelete = (operation_id) => {\r\n    axios\r\n      .delete(\r\n        apirest.apiUrl + '/operations/' + user_id + '/' + operation_id,\r\n        config,\r\n      )\r\n      .then((res) => {\r\n        if (res.data.error) {\r\n          console.log('Invalid data')\r\n          props.reFetch()\r\n          setRows('Loading')\r\n        } else {\r\n          props.reFetch()\r\n          setRows('Loading')\r\n        }\r\n      })\r\n  }\r\n\r\n  const handleSave = (operation_id) => {\r\n    let updateData\r\n    rows.map((row) => {\r\n      if (row.id === operation_id) {\r\n        updateData = row\r\n      }\r\n      return 'x'\r\n    })\r\n    updateData.mount = parseFloat(updateData.mount).toFixed(2)\r\n    axios\r\n      .put(\r\n        apirest.apiUrl + '/operations/' + user_id + '/' + operation_id,\r\n        updateData,\r\n        config,\r\n      )\r\n      .then((res) => {\r\n        if (res.data.error) {\r\n          console.log('Invalid data for update!'), props.reFetch()\r\n        } else {\r\n          props.reFetch()\r\n        }\r\n      })\r\n    onToggleEditMode(operation_id)\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"caption table\">\r\n        <caption>\r\n          {rows.length > 0\r\n            ? 'Utilice el botón de lápiz para editar o eliminar un registro.'\r\n            : 'No hay registros para mostrar.'}\r\n        </caption>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\" />\r\n            <TableCell align=\"left\">Concepto</TableCell>\r\n            <TableCell align=\"left\">Monto</TableCell>\r\n            <TableCell align=\"left\">Fecha</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      // onClick={() => onToggleEditMode(row.id)}\r\n                      onClick={() => handleSave(row.id)}\r\n                    >\r\n                      <DoneIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"delete\"\r\n                      onClick={() => handleDelete(row.id)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"edit\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n              <CustomTableCell {...{ row, name: 'concept', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'mount', onChange }} />\r\n              <TableCell>{row.date}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default OperationHistory\r\n"]},"metadata":{},"sourceType":"module"}