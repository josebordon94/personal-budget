{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos varios\\\\personal-budget\\\\src\\\\components\\\\EditableTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton'; // Icons\n\nimport EditIcon from '@material-ui/icons/EditOutlined';\nimport DoneIcon from '@material-ui/icons/DoneAllTwoTone';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto'\n  },\n  table: {\n    minWidth: 650\n  },\n  selectTableCell: {\n    width: 60\n  },\n  tableCell: {\n    width: 130,\n    height: 40\n  },\n  input: {\n    width: 130,\n    height: 40\n  }\n}));\n\nconst createData = (id, name, calories, fat, carbs, protein) => ({\n  id,\n  name,\n  calories,\n  fat,\n  carbs,\n  protein,\n  isEditMode: false\n});\n\nconst CustomTableCell = ({\n  row,\n  name,\n  onChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    isEditMode\n  } = row;\n  return /*#__PURE__*/_jsxDEV(TableCell, {\n    align: \"left\",\n    className: classes.tableCell,\n    children: isEditMode && name != 'protein' ? /*#__PURE__*/_jsxDEV(Input, {\n      value: row[name],\n      name: name,\n      onChange: e => onChange(e, row),\n      className: classes.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : row[name]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomTableCell, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomTableCell;\n\nfunction EditableTable() {\n  _s2();\n\n  const [rows, setRows] = React.useState([createData(1, 'Frozen yoghurt', 159, 6.0, 24, 4.0), createData(2, 'Ice cream sandwich', 237, 9.0, 37, 4.3), createData(3, 'Eclair', 262, 16.0, 24, 6.0)]);\n  const [previous, setPrevious] = React.useState(rows);\n  const classes = useStyles();\n\n  const onToggleEditMode = id => {\n    setRows(state => {\n      return rows.map(row => {\n        if (row.id === id) {\n          return { ...row,\n            isEditMode: !row.isEditMode\n          };\n        }\n\n        return row;\n      });\n    });\n  };\n\n  const onChange = (e, row) => {\n    if (!previous[row.id]) {\n      setPrevious(state => ({ ...state,\n        [row.id]: row\n      }));\n    }\n\n    const value = e.target.value;\n    const name = e.target.name;\n    const {\n      id\n    } = row;\n    const newRows = rows.map(row => {\n      if (row.id === id) {\n        return { ...row,\n          [name]: value\n        };\n      }\n\n      return row;\n    });\n    setRows(newRows);\n  };\n\n  const handleDelete = rowID => {\n    console.log(rows);\n    const newData = new Array();\n    const newRows = rows.map(row => {\n      if (row.id != rowID) {\n        newData.push(row);\n      }\n    });\n    setRows(newData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"caption table\",\n      children: [/*#__PURE__*/_jsxDEV(\"caption\", {\n        children: \"A barbone structure table example with a caption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Dessert (100g serving)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Calories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Fat\\xA0(g)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Carbs\\xA0(g)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Protein\\xA0(g)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.selectTableCell,\n            children: row.isEditMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"done\",\n                onClick: () => onToggleEditMode(row.id),\n                children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"revert\",\n                onClick: () => handleDelete(row.id),\n                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"delete\",\n              onClick: () => onToggleEditMode(row.id),\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'name',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'calories',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'fat',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'carbs',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'protein',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(EditableTable, \"70DL1xIvHU3ptHISm8DFqCJMP04=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = EditableTable;\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTableCell\");\n$RefreshReg$(_c2, \"EditableTable\");","map":{"version":3,"sources":["C:/Proyectos varios/personal-budget/src/components/EditableTable.js"],"names":["React","ReactDOM","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Input","Paper","IconButton","EditIcon","DoneIcon","DeleteIcon","useStyles","theme","root","width","marginTop","spacing","overflowX","table","minWidth","selectTableCell","tableCell","height","input","createData","id","name","calories","fat","carbs","protein","isEditMode","CustomTableCell","row","onChange","classes","e","EditableTable","rows","setRows","useState","previous","setPrevious","onToggleEditMode","state","map","value","target","newRows","handleDelete","rowID","console","log","newData","Array","push"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Input from '@material-ui/core/Input'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n// Icons\r\nimport EditIcon from '@material-ui/icons/EditOutlined'\r\nimport DoneIcon from '@material-ui/icons/DoneAllTwoTone'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n}))\r\n\r\nconst createData = (id, name, calories, fat, carbs, protein) => ({\r\n  id,\r\n  name,\r\n  calories,\r\n  fat,\r\n  carbs,\r\n  protein,\r\n  isEditMode: false,\r\n})\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles()\r\n  const { isEditMode } = row\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode && name != 'protein' ? (\r\n        <Input\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  )\r\n}\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    createData(1, 'Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData(2, 'Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData(3, 'Eclair', 262, 16.0, 24, 6.0),\r\n  ])\r\n  const [previous, setPrevious] = React.useState(rows)\r\n  const classes = useStyles()\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode }\r\n        }\r\n        return row\r\n      })\r\n    })\r\n  }\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }))\r\n    }\r\n    const value = e.target.value\r\n    const name = e.target.name\r\n    const { id } = row\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value }\r\n      }\r\n      return row\r\n    })\r\n    setRows(newRows)\r\n  }\r\n\r\n  const handleDelete = (rowID) => {\r\n    console.log(rows)\r\n    const newData = new Array()\r\n    const newRows = rows.map((row) => {\r\n      if (row.id != rowID) {\r\n        newData.push(row)\r\n      }\r\n    })\r\n    setRows(newData)\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"caption table\">\r\n        <caption>A barbone structure table example with a caption</caption>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\" />\r\n            <TableCell align=\"left\">Dessert (100g serving)</TableCell>\r\n            <TableCell align=\"left\">Calories</TableCell>\r\n            <TableCell align=\"left\">Fat&nbsp;(g)</TableCell>\r\n            <TableCell align=\"left\">Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align=\"left\">Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      onClick={() => onToggleEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"revert\"\r\n                      onClick={() => handleDelete(row.id)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n              <CustomTableCell {...{ row, name: 'name', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'calories', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'fat', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'carbs', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'protein', onChange }} />\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default EditableTable\r\n"]},"metadata":{},"sourceType":"module"}