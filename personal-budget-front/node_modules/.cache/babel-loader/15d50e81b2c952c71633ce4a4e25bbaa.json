{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos varios\\\\pb\\\\personal-budget-front\\\\src\\\\components\\\\EditableTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton'; // Icons\n\nimport EditIcon from '@material-ui/icons/EditOutlined';\nimport DoneIcon from '@material-ui/icons/DoneAllTwoTone';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport apirest from '../services/apirest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto'\n  },\n  table: {\n    maxWidth: 650\n  },\n  selectTableCell: {\n    width: 60\n  },\n  tableCell: {\n    width: 130,\n    height: 40\n  },\n  input: {\n    width: 130,\n    height: 40\n  }\n}));\n\nconst createData = (id, concept, mount, type, date) => ({\n  id,\n  concept,\n  mount,\n  type,\n  date,\n  isEditMode: false\n});\n\nconst CustomTableCell = ({\n  row,\n  name,\n  onChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    isEditMode\n  } = row;\n  return /*#__PURE__*/_jsxDEV(TableCell, {\n    align: \"left\",\n    className: classes.tableCell,\n    children: isEditMode && name != 'type' ? /*#__PURE__*/_jsxDEV(Input, {\n      value: row[name],\n      name: name,\n      onChange: e => onChange(e, row),\n      className: classes.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : row[name]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomTableCell, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomTableCell;\n\nfunction EditableTable() {\n  _s2();\n\n  const [redirect, setRedirect] = useState(false);\n  const classes = useStyles();\n  const [rows, setRows] = useState([]);\n  const [previous, setPrevious] = React.useState(rows); // const jwt = localStorage.getItem('jwt')\n\n  const user_id = localStorage.getItem('user_id');\n  useEffect(async () => {\n    let newRows = [];\n    const res = await axios.get(apirest.apiUrl + '/operations/' + user_id);\n    res.data.forEach(element => {\n      newRows.push(createData(element._id, element.concept, element.mount, element.type, element.date));\n    });\n    console.log(newRows);\n    setRows(newRows);\n  }, [redirect]);\n\n  const onToggleEditMode = id => {\n    setRows(state => {\n      return rows.map(row => {\n        if (row.id === id) {\n          return { ...row,\n            isEditMode: !row.isEditMode\n          };\n        }\n\n        return row;\n      });\n    });\n  };\n\n  const onChange = (e, row) => {\n    if (!previous[row.id]) {\n      setPrevious(state => ({ ...state,\n        [row.id]: row\n      }));\n    }\n\n    const value = e.target.value;\n    const name = e.target.name;\n    const {\n      id\n    } = row;\n    const newRows = rows.map(row => {\n      if (row.id === id) {\n        return { ...row,\n          [name]: value\n        };\n      }\n\n      return row;\n    });\n    setRows(newRows);\n  };\n\n  const handleDelete = operation_id => {\n    console.log('enviando datos:', user_id, operation_id);\n    axios.delete(apirest.apiUrl + '/operations/' + user_id + '/' + operation_id).then(res => {\n      console.log(res);\n\n      if (res.data.error) {\n        console.log('Error in server'); // setErrorMsg(res.data.message)\n      } else {\n        setRedirect(true);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"caption table\",\n      children: [/*#__PURE__*/_jsxDEV(\"caption\", {\n        children: rows.length > 0 ? 'Utilice el botón de lápiz para editar o eliminar un registro.' : 'No existen registros para mostrar.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Concepto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Importe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Tipo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Fecha y hora\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.selectTableCell,\n            children: row.isEditMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"done\",\n                onClick: () => onToggleEditMode(row.id),\n                children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"revert\",\n                onClick: () => handleDelete(row.id),\n                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"delete\",\n              onClick: () => onToggleEditMode(row.id),\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'concept',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'mount',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'type',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: 'date',\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(EditableTable, \"n93WzCA7vzE9oVFoQ+nECSHtl6s=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = EditableTable;\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTableCell\");\n$RefreshReg$(_c2, \"EditableTable\");","map":{"version":3,"sources":["C:/Proyectos varios/pb/personal-budget-front/src/components/EditableTable.js"],"names":["React","Redirect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Input","Paper","IconButton","EditIcon","DoneIcon","DeleteIcon","useState","useEffect","axios","apirest","useStyles","theme","root","width","marginTop","spacing","overflowX","table","maxWidth","selectTableCell","tableCell","height","input","createData","id","concept","mount","type","date","isEditMode","CustomTableCell","row","name","onChange","classes","e","EditableTable","redirect","setRedirect","rows","setRows","previous","setPrevious","user_id","localStorage","getItem","newRows","res","get","apiUrl","data","forEach","element","push","_id","console","log","onToggleEditMode","state","map","value","target","handleDelete","operation_id","delete","then","error","length"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Input from '@material-ui/core/Input'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n// Icons\r\nimport EditIcon from '@material-ui/icons/EditOutlined'\r\nimport DoneIcon from '@material-ui/icons/DoneAllTwoTone'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport apirest from '../services/apirest'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    maxWidth: 650,\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n}))\r\n\r\nconst createData = (id, concept, mount, type, date) => ({\r\n  id,\r\n  concept,\r\n  mount,\r\n  type,\r\n  date,\r\n  isEditMode: false,\r\n})\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles()\r\n  const { isEditMode } = row\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode && name != 'type' ? (\r\n        <Input\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  )\r\n}\r\nfunction EditableTable() {\r\n  const [redirect, setRedirect] = useState(false)\r\n  const classes = useStyles()\r\n  const [rows, setRows] = useState([])\r\n  const [previous, setPrevious] = React.useState(rows)\r\n  // const jwt = localStorage.getItem('jwt')\r\n  const user_id = localStorage.getItem('user_id')\r\n  useEffect(async () => {\r\n    let newRows = []\r\n    const res = await axios.get(apirest.apiUrl + '/operations/' + user_id)\r\n    res.data.forEach((element) => {\r\n      newRows.push(\r\n        createData(\r\n          element._id,\r\n          element.concept,\r\n          element.mount,\r\n          element.type,\r\n          element.date,\r\n        ),\r\n      )\r\n    })\r\n    console.log(newRows)\r\n    setRows(newRows)\r\n  }, [redirect])\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode }\r\n        }\r\n        return row\r\n      })\r\n    })\r\n  }\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }))\r\n    }\r\n    const value = e.target.value\r\n    const name = e.target.name\r\n    const { id } = row\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value }\r\n      }\r\n      return row\r\n    })\r\n    setRows(newRows)\r\n  }\r\n\r\n  const handleDelete = (operation_id) => {\r\n    console.log('enviando datos:', user_id, operation_id)\r\n    axios\r\n      .delete(apirest.apiUrl + '/operations/' + user_id + '/' + operation_id)\r\n      .then((res) => {\r\n        console.log(res)\r\n        if (res.data.error) {\r\n          console.log('Error in server')\r\n          // setErrorMsg(res.data.message)\r\n        } else {\r\n          setRedirect(true)\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"caption table\">\r\n        <caption>\r\n          {rows.length > 0\r\n            ? 'Utilice el botón de lápiz para editar o eliminar un registro.'\r\n            : 'No existen registros para mostrar.'}\r\n        </caption>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"left\" />\r\n            <TableCell align=\"left\">Concepto</TableCell>\r\n            <TableCell align=\"left\">Importe</TableCell>\r\n            <TableCell align=\"left\">Tipo</TableCell>\r\n            <TableCell align=\"left\">Fecha y hora</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      onClick={() => onToggleEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"revert\"\r\n                      onClick={() => handleDelete(row.id)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n              <CustomTableCell {...{ row, name: 'concept', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'mount', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'type', onChange }} />\r\n              <CustomTableCell {...{ row, name: 'date', onChange }} />\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default EditableTable\r\n"]},"metadata":{},"sourceType":"module"}